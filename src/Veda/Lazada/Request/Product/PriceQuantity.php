<?php
/**
 * User: ketu.lai <ketu.lai@gmail.com>
 * Date: 2017/2/6
 */
namespace Veda\Lazada\Request\Product;

use Veda\Lazada\Exception\InvalidArgumentException;
use Veda\Lazada\Request\RequestAbstract;
use Veda\Utils\Converter\ArrayToXml;

class PriceQuantity extends RequestAbstract
{
    protected $sku;
    protected $qty;
    protected $price;
    protected $salePrice;
    protected $saleStartDate;
    protected $saleEndDate;

    protected $batchData = [];

    public function getAction()
    {
        return 'UpdatePriceQuantity';
        // TODO: Implement getAction() method.
    }

    public function getMethod()
    {
        // TODO: Implement getMethod() method.
        return self::HTTP_METHOD_POST;
    }

    public function setSku($sku)
    {
        $this->sku = $sku;
    }

    public function setQty($qty)
    {
        $this->qty = $qty;
    }

    public function setSalePrice($price)
    {
        $this->salePrice = $price;
    }

    public function setSaleDate(\DateTime $startDate, \DateTime $endDate = null)
    {
        $this->saleStartDate = $startDate;
        if (null != $endDate) {
            $this->saleEndDate = $endDate;
        }
    }

    public function setBatchData(array $batchData)
    {

        $this->batchData = $batchData;
    }

    protected function getRequestBody()
    {
       $batchData = [];
        if ($this->sku) {
            $batchData = array_merge([
                $this->sku => [
                    'price' => $this->price,
                    'qty' => $this->qty,
                    'salePrice' => $this->salePrice,
                    'saleStartDate' => $this->saleStartDate,
                    'saleEndDate' => $this->saleEndDate
                ]], $this->batchData);
        }
        if (!$batchData) {
            throw new InvalidArgumentException('no data in the request %s', __CLASS__);
        }
        $requestData = [];
        foreach ($batchData as $sku => $data) {
            if (!isset($data['price']) && !isset($data['qty']) && !isset($data['salePrice'])) {
                throw new InvalidArgumentException("You can not update product without Price or Quantity or SalePrice in request %s", __CLASS__);
            }
            if (isset($data['salePrice']) && (!isset($data['saleStartDate']) && !isset($data['saleEndDate']))) {
                throw new \InvalidArgumentException("You need to set SaleStartDate or SaleEndDate with SalePrice in request %s", __CLASS__);
            }

            $requestData[]['Sku'] = [
              'SellerSku'=> $sku,
                'Quantity'=> $data['qty'],
                'Price'=> $data['price'],
                'SalePrice'=> $data['salePrice'],
                'SaleStartDate'=> $data['saleStartDate'],
                'SaleEndDate'=> $data['saleEndDate']
            ];

        }
        $data = [
            'Product'=>[
                'Skus'=> $requestData
            ]
        ];

        $this->requestBody = ArrayToXml::convert($data, 'Request');
        return parent::getRequestBody(); // TODO: Change the autogenerated stub
    }
}